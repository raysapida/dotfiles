# TMUX Plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sidebar'

set -g @plugin 'tmux-plugins/tmux-urlview'
# Dependencies
# urlview - brew install urlview on OS X.
# extract_url - brew install extract_url on OS X.

set -g @plugin 'tmux-plugins/tmux-open'
# ctrl - o

set -g @plugin 'tmux-plugins/tmux-resurrect'
# restoring vim and neovim sessions
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
# restoring pane contents
set -g @resurrect-capture-pane-contents 'on'
# continuous saving of tmux env
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'
set -g default-command "/bin/bash -l"

# Default configurations for tmux
set -g @plugin 'tmux-plugins/tmux-sensible'

# plugin for battery status
set -g @plugin 'tmux-plugins/tmux-battery'

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

set -g default-shell $SHELL 
set -g default-command "reattach-to-user-namespace -l ${SHELL}"
set-option -g default-command "reattach-to-user-namespace -l zsh"


# Use C-s (control and s key at the same time) as the prefix key
unbind C-b
set -g prefix C-s
bind-key C-s send-prefix

bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"


# Set zsh as the default shell to run when opening a tmux session
set-option -g default-shell /bin/zsh
set-option -g default-command /bin/zsh

bind-key -n C-h select-pane -L
bind-key -n C-j select-pane -D
bind-key -n C-k select-pane -U
bind-key -n C-l select-pane -R

set-option -g default-terminal "screen-256color"
set-option -g status-keys "emacs"

set -g message-fg black
set -g message-bg yellow
set -g message-command-fg blue
set -g message-command-bg black

setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=yellow]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=yellow]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-bg colour0
setw -g window-status-current-fg colour11
setw -g window-status-current-attr dim
setw -g window-status-bg green
setw -g window-status-fg black
setw -g window-status-attr reverse
set -g status-bg colour234
set -g status-fg colour137

#set -g status-left ''

# set -g status-right " #P "
# set -g status-right '#(tmux-spotify-info)'

set -g status-position bottom
set -g status-bg colour234
set -g status-fg colour137
set -g status-attr dim
set -g status-left ''
set -g status-right '#(tmux-spotify-info) #[fg=colour233,bg=colour241,bold] #{battery_percentage} battery #{battery_remain} #[fg=colour229,bg=colour248,bold] %a %b %d #[fg=colour233,bg=colour245,bold] %I:%M %p '
set -g status-right-length 100
set -g status-left-length 20


bind-key - split-window -v -c '#{pane_current_path}'
bind-key \ split-window -h -c '#{pane_current_path}'

bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1

bind -n C-Left resize-pane -L 10
bind -n C-Right resize-pane -R 10
bind -n C-Down resize-pane -D 5
bind -n C-Up resize-pane -U 5

bind c new-window -c "#{pane_current_path}"

# bind-key q new-window "fortune | cowsay -f tux" 

bind -n F1 select-window -t 1
bind -n F2 select-window -t 2
bind -n F3 select-window -t 3
bind -n F4 select-window -t 4
bind -n F5 select-window -t 5
bind -n F6 new-window
bind -n F7 command-prompt "rename-window '%%'"
# mouse support toggle needs tmux 2.2
bind -n F11 set -g mouse
# toggles tmux bar on/off
bind -n F12 set status


# start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
set-window-option -g pane-base-index 1
set -g renumber-windows on

bind-key b break-pane -d

bind-key C-j choose-tree

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Quickly view system & process info in htop
bind-key h split-window -h "htop"

# Quickly view system & process info in vtop
bind-key v split-window -h "vtop"

# Quickly edit todo list
bind-key t split-window -h "nvim ~/todo.md"

# Quickly edit a file in your wiki
bind-key w split-window -h -c ~/code/wiki "vim +:NERDTree"

bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# Prompted join-pane
# bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# Easily swap a pane (targeted by pane number) with the current pane
# bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

# bind-key C-b send-keys 'tat && exit' 'C-m'
# bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux
# display-message -p "#S")" || tmux kill-session'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
